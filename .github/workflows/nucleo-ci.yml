name: NUCLEO Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'DPM2_NUCLEO/**'
      - '.github/workflows/nucleo-tests.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'DPM2_NUCLEO/**'

jobs:
  native-tests:
    name: Tests Natifs
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc make cppcheck lcov
    
    - name: Run native tests
      run: |
        cd DPM2_NUCLEO/test
        make test-native
    
    - name: Generate coverage report
      run: |
        cd DPM2_NUCLEO/test
        make coverage
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        directory: DPM2_NUCLEO/test/reports/coverage
        flags: nucleo-native
        name: nucleo-native-coverage
    
    - name: Generate test report
      run: |
        cd DPM2_NUCLEO/test
        make reports
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: native-test-results
        path: DPM2_NUCLEO/test/reports/

  static-analysis:
    name: Analyse Statique
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install cppcheck
      run: |
        sudo apt-get update
        sudo apt-get install -y cppcheck
    
    - name: Run static analysis
      run: |
        cd DPM2_NUCLEO/test
        make static-analysis
    
    - name: Upload analysis results
      uses: actions/upload-artifact@v3
      with:
        name: static-analysis-results
        path: DPM2_NUCLEO/test/reports/cppcheck.xml

  embedded-build:
    name: Build Tests Embarqu√©s
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install ARM toolchain
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-arm-none-eabi
    
    - name: Build embedded tests
      run: |
        cd DPM2_NUCLEO/test
        make test-embedded
    
    - name: Upload embedded binaries
      uses: actions/upload-artifact@v3
      with:
        name: embedded-test-binaries
        path: DPM2_NUCLEO/test/build/embedded/

  test-summary:
    name: R√©sum√© des Tests
    runs-on: ubuntu-latest
    needs: [native-tests, static-analysis, embedded-build]
    if: always()
    
    steps:
    - name: Download test results
      uses: actions/download-artifact@v3
      with:
        name: native-test-results
        path: test-results/
    
    - name: Download static analysis
      uses: actions/download-artifact@v3
      with:
        name: static-analysis-results
        path: static-analysis/
    
    - name: Generate summary
      run: |
        echo "# üß™ R√©sum√© des Tests NUCLEO" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Analyser les r√©sultats des tests natifs
        if [ -d "test-results" ]; then
          total_tests=0
          failed_tests=0
          
          for log_file in test-results/*.log; do
            if [ -f "$log_file" ]; then
              tests=$(grep -c "RUN_TEST" "$log_file" 2>/dev/null || echo 0)
              failures=$(grep -c "FAIL:" "$log_file" 2>/dev/null || echo 0)
              total_tests=$((total_tests + tests))
              failed_tests=$((failed_tests + failures))
            fi
          done
          
          echo "## üìä Tests Natifs" >> $GITHUB_STEP_SUMMARY
          echo "- **Total**: $total_tests tests" >> $GITHUB_STEP_SUMMARY
          echo "- **R√©ussis**: $((total_tests - failed_tests)) tests" >> $GITHUB_STEP_SUMMARY
          echo "- **√âchou√©s**: $failed_tests tests" >> $GITHUB_STEP_SUMMARY
          
          if [ $failed_tests -eq 0 ] && [ $total_tests -gt 0 ]; then
            echo "- **Statut**: ‚úÖ Tous les tests passent" >> $GITHUB_STEP_SUMMARY
          elif [ $failed_tests -gt 0 ]; then
            echo "- **Statut**: ‚ùå $failed_tests test(s) √©chou√©(s)" >> $GITHUB_STEP_SUMMARY
          fi
        fi
        
        # Statut de l'analyse statique
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## üîç Analyse Statique" >> $GITHUB_STEP_SUMMARY
        if [ -f "static-analysis/cppcheck.xml" ]; then
          errors=$(grep -c 'severity="error"' static-analysis/cppcheck.xml 2>/dev/null || echo 0)
          warnings=$(grep -c 'severity="warning"' static-analysis/cppcheck.xml 2>/dev/null || echo 0)
          echo "- **Erreurs**: $errors" >> $GITHUB_STEP_SUMMARY
          echo "- **Avertissements**: $warnings" >> $GITHUB_STEP_SUMMARY
          
          if [ $errors -eq 0 ]; then
            echo "- **Statut**: ‚úÖ Aucune erreur d√©tect√©e" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Statut**: ‚ùå $errors erreur(s) d√©tect√©e(s)" >> $GITHUB_STEP_SUMMARY
          fi
        fi
        
        # Statut des builds embarqu√©s
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## üéØ Tests Embarqu√©s" >> $GITHUB_STEP_SUMMARY
        echo "- **Compilation**: ${{ needs.embedded-build.result == 'success' && '‚úÖ R√©ussie' || '‚ùå √âchou√©e' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Note**: Ex√©cution sur cible STM32 requise manuellement" >> $GITHUB_STEP_SUMMARY

  notification:
    name: Notification
    runs-on: ubuntu-latest
    needs: [native-tests, static-analysis, embedded-build]
    if: always() && github.event_name == 'push'
    
    steps:
    - name: Notify on success
      if: needs.native-tests.result == 'success' && needs.static-analysis.result == 'success' && needs.embedded-build.result == 'success'
      run: |
        echo "‚úÖ Tous les tests NUCLEO sont pass√©s avec succ√®s!"
    
    - name: Notify on failure
      if: needs.native-tests.result == 'failure' || needs.static-analysis.result == 'failure' || needs.embedded-build.result == 'failure'
      run: |
        echo "‚ùå Certains tests NUCLEO ont √©chou√©:"
        echo "- Tests natifs: ${{ needs.native-tests.result }}"
        echo "- Analyse statique: ${{ needs.static-analysis.result }}"
        echo "- Build embarqu√©: ${{ needs.embedded-build.result }}"
        exit 1
